import { Express } from 'express';
import { Route, ServiceConfig } from '../types';

/**
 * API Documentation generator
 */
export interface ApiDocumentation {
  title: string;
  version: string;
  baseUrl: string;
  services: ServiceDocumentation[];
}

export interface ServiceDocumentation {
  name: string;
  description?: string;
  routes: RouteDocumentation[];
}

export interface RouteDocumentation {
  path: string;
  method: string;
  description?: string;
  parameters?: ParameterDocumentation[];
  responses?: ResponseDocumentation[];
}

export interface ParameterDocumentation {
  name: string;
  type: string;
  required: boolean;
  description?: string;
}

export interface ResponseDocumentation {
  status: number;
  description: string;
  example?: any;
}

/**
 * Generate API documentation from registered services
 */
export class ApiDocGenerator {
  private services: Map<string, ServiceConfig>;
  private title: string;
  private version: string;
  private baseUrl: string;

  constructor(
    options: {
      title?: string;
      version?: string;
      baseUrl?: string;
    } = {}
  ) {
    this.services = new Map();
    this.title = options.title || 'API Documentation';
    this.version = options.version || '1.0.0';
    this.baseUrl = options.baseUrl || 'http://localhost:3000';
  }

  /**
   * Register a service for documentation
   */
  registerService(service: ServiceConfig): void {
    this.services.set(service.name, service);
  }

  /**
   * Generate documentation in JSON format
   */
  generateJson(): ApiDocumentation {
    const services: ServiceDocumentation[] = [];

    this.services.forEach((service, name) => {
      const serviceDoc: ServiceDocumentation = {
        name,
        routes: service.routes.map((route) => ({
          path: `/api/${name}${route.path}`,
          method: route.method,
        })),
      };

      services.push(serviceDoc);
    });

    return {
      title: this.title,
      version: this.version,
      baseUrl: this.baseUrl,
      services,
    };
  }

  /**
   * Generate documentation in Markdown format
   */
  generateMarkdown(): string {
    let md = `# ${this.title}\n\n`;
    md += `Version: ${this.version}\n\n`;
    md += `Base URL: \`${this.baseUrl}\`\n\n`;
    md += `---\n\n`;

    this.services.forEach((service, name) => {
      md += `## ${name.charAt(0).toUpperCase() + name.slice(1)} Service\n\n`;

      service.routes.forEach((route) => {
        const fullPath = `/api/${name}${route.path}`;
        md += `### ${route.method} ${fullPath}\n\n`;
        md += `**Endpoint:** \`${route.method} ${fullPath}\`\n\n`;

        if (route.method === 'POST' || route.method === 'PUT') {
          md += `**Request Body:**\n\`\`\`json\n{\n  // Add your request body here\n}\n\`\`\`\n\n`;
        }

        md += `**Response:**\n\`\`\`json\n{\n  "success": true,\n  "data": {}\n}\n\`\`\`\n\n`;
        md += `---\n\n`;
      });
    });

    return md;
  }

  /**
   * Generate OpenAPI (Swagger) specification
   */
  generateOpenApi(): any {
    const paths: any = {};

    this.services.forEach((service, name) => {
      service.routes.forEach((route) => {
        const fullPath = `/api/${name}${route.path}`;
        const method = route.method.toLowerCase();

        if (!paths[fullPath]) {
          paths[fullPath] = {};
        }

        paths[fullPath][method] = {
          tags: [name],
          summary: `${route.method} ${fullPath}`,
          responses: {
            '200': {
              description: 'Successful response',
              content: {
                'application/json': {
                  schema: {
                    type: 'object',
                    properties: {
                      success: { type: 'boolean' },
                      data: { type: 'object' },
                    },
                  },
                },
              },
            },
            '400': {
              description: 'Bad request',
            },
            '500': {
              description: 'Internal server error',
            },
          },
        };

        if (method === 'post' || method === 'put') {
          paths[fullPath][method].requestBody = {
            content: {
              'application/json': {
                schema: {
                  type: 'object',
                },
              },
            },
          };
        }
      });
    });

    return {
      openapi: '3.0.0',
      info: {
        title: this.title,
        version: this.version,
        description: 'API documentation generated by StellarJS',
      },
      servers: [
        {
          url: this.baseUrl,
          description: 'API Server',
        },
      ],
      paths,
    };
  }

  /**
   * Generate HTML documentation
   */
  generateHtml(): string {
    const doc = this.generateJson();

    let html = `
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>${this.title}</title>
  <style>
    * { margin: 0; padding: 0; box-sizing: border-box; }
    body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; padding: 2rem; background: #f5f5f5; }
    .container { max-width: 1200px; margin: 0 auto; background: white; padding: 2rem; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
    h1 { color: #333; margin-bottom: 0.5rem; }
    .version { color: #666; margin-bottom: 1rem; }
    .base-url { background: #f0f0f0; padding: 0.5rem 1rem; border-radius: 4px; margin-bottom: 2rem; }
    .service { margin-bottom: 3rem; }
    .service h2 { color: #667eea; margin-bottom: 1rem; padding-bottom: 0.5rem; border-bottom: 2px solid #667eea; }
    .route { background: #fafafa; padding: 1rem; margin-bottom: 1rem; border-radius: 4px; border-left: 4px solid #667eea; }
    .method { display: inline-block; padding: 0.25rem 0.75rem; border-radius: 4px; font-weight: bold; font-size: 0.875rem; margin-right: 0.5rem; }
    .method.GET { background: #61affe; color: white; }
    .method.POST { background: #49cc90; color: white; }
    .method.PUT { background: #fca130; color: white; }
    .method.DELETE { background: #f93e3e; color: white; }
    .path { font-family: 'Courier New', monospace; color: #333; }
  </style>
</head>
<body>
  <div class="container">
    <h1>${this.title}</h1>
    <div class="version">Version: ${this.version}</div>
    <div class="base-url"><strong>Base URL:</strong> <code>${this.baseUrl}</code></div>
`;

    doc.services.forEach((service) => {
      html += `
    <div class="service">
      <h2>${service.name.charAt(0).toUpperCase() + service.name.slice(1)} Service</h2>
`;

      service.routes.forEach((route) => {
        html += `
      <div class="route">
        <span class="method ${route.method}">${route.method}</span>
        <span class="path">${route.path}</span>
      </div>
`;
      });

      html += `    </div>\n`;
    });

    html += `
  </div>
</body>
</html>
`;

    return html;
  }

  /**
   * Setup documentation endpoint
   */
  setupDocEndpoint(app: Express, path = '/api/docs'): void {
    app.get(path, (req, res) => {
      res.type('html').send(this.generateHtml());
    });

    app.get(`${path}/json`, (req, res) => {
      res.json(this.generateJson());
    });

    app.get(`${path}/openapi`, (req, res) => {
      res.json(this.generateOpenApi());
    });

    app.get(`${path}/markdown`, (req, res) => {
      res.type('text/plain').send(this.generateMarkdown());
    });
  }
}

/**
 * Create an API documentation generator instance
 */
export const createApiDocGenerator = (options?: {
  title?: string;
  version?: string;
  baseUrl?: string;
}): ApiDocGenerator => {
  return new ApiDocGenerator(options);
};
